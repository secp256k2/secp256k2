{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SECP256k2: A Modern Library for Elliptic Curve Cryptography","text":""},{"location":"#introduction","title":"Introduction","text":"<p>SECP256k2 is a high-performance and easy-to-use library for working with the SECP256k1 elliptic curve. This library is meticulously designed to provide a robust set of functionalities needed for the development of secure, fast, and efficient cryptographic applications.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Optimized Performance: Leveraging optimized algorithms and efficient code structures for high-speed operations on the SECP256k1 curve.</li> <li>Comprehensive Toolset: Offering a wide array of functionalities ranging from basic arithmetic operations to advanced cryptographic protocols.</li> <li>Cross-Platform: Written in [your programming language], SECP256k2 is designed to be used on multiple operating systems including Windows and Linux.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":""},{"location":"#windows-with-pip","title":"windows with <code>pip</code>","text":"<pre><code>pip install secp256k2\n</code></pre>"},{"location":"#linux-and-mac-with-pip3","title":"linux and Mac with <code>pip3</code>","text":"<pre><code>pip3 install secp256k2\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>A quick example to get you started with SECP256k2:</p> <pre><code>from secp256k2 import Contactor\n\ncont = Contactor()\n\ndec = 0x00000000000000000000000000000000000000000000001\n\nwif_compress = cont.Decimal_To_Wif(dec, True)\n\nwif_uncompress = cont.Decimal_To_Wif(dec, False)\n\n</code></pre> <p>compressed and uncompressed bitcoin address wallet from decimal (integer).</p> <pre><code>from secp256k2 import Contactor\n# added Contactor class to project script\nco = Contactor()\n# dec\ndec = 0xffffffffffffffffffffff880000000000000\ncompress_address = co.Decimal_To_Addr(dec, addr_type=0, compress=True)\nuncompress_address = co.Decimal_To_Addr(dec, addr_type=0, compress=False)\n</code></pre> <p>Convert Decimal (Number) To Ethereum Address (Maximum Range: <code>115792089237316195423570985008687907852837564279074904382605163141518161494337</code>):</p> <pre><code>from secp256k2 import Contactor\n\ncont = Contactor()\n\ndec_num = 1 # example , can use any range number to \n# ethereum address generated from decimal number \neth_address = cont.Decimal_To_ETH_Addr(dec_num)\n</code></pre> <p>convert and Generated Wif Key from decimal Number:</p> <pre><code>from secp256k2 import Contactor\n\nco = Contactor()\n\ndec = 0xffffffffffffffffffffffffff8999999999333666666\nwif_compress = co.Decimal_To_Wif(dec, True)\nwif_uncompress = co.Decimal_To_Wif(dec, False)\n</code></pre> <p>Decimal to RIPEMD160</p> <pre><code>from secp256k2 import Contactor\n\nco = Contactor()\n\ndec = 0xfffffffffffffffffff99999999999\n\nripemd160 = co.Decimal_To_RIPEMD160(dec)\n</code></pre> <p>convert wif key to private key (hex):</p> <pre><code>from secp256k2 import Contactor\n\nco = Contactor()\n\nWIF = \"WIF_KEY_HERE\"\n\nprivatekey = co.Wif_To_Hex(WIF)\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>For more detailed information and advanced usage, please refer to the full documentation.</p>"},{"location":"#contribution","title":"Contribution","text":"<p>We welcome contributions from the open-source community. If you find any issues or would like to propose enhancements, please feel free to open an issue or submit a pull request.</p>"},{"location":"#license","title":"License","text":"<p>SECP256k2 is licensed under MIT. For more information, please see the LICENSE file.</p>"},{"location":"#donate","title":"Donate:","text":"<p>Bitcoin:<code>1MMDRZA12xdBLD1P5AfEfvEMErp588vmF9</code></p> <p>Programmer And Owner : PyMmdrza</p> <p>official website : MMDRZA.COM</p>"}]}